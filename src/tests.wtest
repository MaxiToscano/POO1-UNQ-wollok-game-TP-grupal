import tanque.*
import elementos.*
import wollok.game.*
import escenarios.*
import enemigos.*
import config.*

describe "Tanque" {
	
	test "Comprobar imagen de la direccion" {
		assert.equals("tanque_up.png", heroe.image());
		
		heroe.irA(heroe.position().right(1), derecha);
		
		assert.equals("tanque_right.png", heroe.image());
		
		heroe.irA(heroe.position().up(1), arriba);
		
		assert.equals("tanque_up.png", heroe.image());
		
		heroe.irA(heroe.position().left(1), izquierda);
		
		assert.equals("tanque_left.png", heroe.image());
		
		heroe.irA(heroe.position().down(1), abajo);
		
		assert.equals("tanque_down.png", heroe.image());
	}
	
	test "Verificar obstaculos" {
		assert.that(heroe.sinObstaculo(game.at(5,0)));
		nivelUno.iniciar();
		game.schedule(2000, {assert.notThat(heroe.sinObstaculo(game.at(5,0)))});
	}
	
	test "Verificar vida del tanque" {
		assert.equals(3, heroe.cantidadDeVidas());
		heroe.perderVida();
		assert.equals(2, heroe.cantidadDeVidas());
		heroe.perderVida();
		heroe.perderVida();
		assert.equals(0, heroe.cantidadDeVidas());
		heroe.perderVida();
		assert.equals(0, heroe.cantidadDeVidas());
	}
	
	test "Verificar destruccion del tanque" {
		nivelUno.iniciar();
		game.schedule(2000, {assert.that(game.hasVisual(heroe))});
		//heroe.destruido();
		game.schedule(2000, {assert.notThat(game.hasVisual(heroe))})
	}
	
}


describe "Enemigos" {
	
	const leopard = new Leopard(timeMove=2000, shotTime=2000)
	const mbt70 = new MBT70(timeMove=2000, shotTime=2000)
	const bala = new Bala(tanque=heroe, position=game.origin(), direccion=arriba)
	const fireball = new Fireball(tanque=mbt70, position=game.origin(), direccion=arriba)
	
	test "leopard recibe daño" {
		config.agregarYMover(bala)
		leopard.recibirDanio(bala)
		assert.equals(70, leopard.vida())
	}
	
	test "leopard no recibe daño de otro enemigo" {
		config.agregarYMover(fireball)
		leopard.impactar(fireball)
		assert.equals(100, leopard.vida())
	}
	
	test "gestor de enemigos" {
		//Se agregan 2 enemigos y se verifica la cantidad de enemigos en el mapa y que faltan agregar enemigos.
		gestorDeEnemigos.agregarNuevoEnemigo()
		gestorDeEnemigos.agregarNuevoEnemigo()
		assert.equals(2, gestorDeEnemigos.enemigosEnMapa().size())
		assert.that(gestorDeEnemigos.faltanAgregarEnemigos())
		//Se agregan 2 enemigos más y se verifica que no hace falta agregar más enemigos al alcanzar el máximo a la vez.
		gestorDeEnemigos.agregarNuevoEnemigo()
		gestorDeEnemigos.agregarNuevoEnemigo()
		assert.notThat(gestorDeEnemigos.faltanAgregarEnemigos())
		//Se elimina un enemigo y se verifica la actualización del estado.
		gestorDeEnemigos.enemigosEnMapa().head().moverDisparandoAleatorio()
		gestorDeEnemigos.enemigosEnMapa().head().removerEnemigo()
		assert.equals(3, gestorDeEnemigos.enemigosEnMapa().size())
		assert.that(gestorDeEnemigos.faltanAgregarEnemigos())
		assert.equals(1, gestorDeEnemigos.enemigosCaidos())
		//Se resetea el gestor de enemigos y se verifica
		gestorDeEnemigos.resetEnemigos()
		assert.equals([], gestorDeEnemigos.enemigosEnMapa())
		assert.equals(0, gestorDeEnemigos.enemigosCaidos())
		assert.equals(0, gestorDeEnemigos.enemigosAgregados())
		}
}